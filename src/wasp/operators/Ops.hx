package wasp.operators;

import wasp.types.BlockType;
import wasp.types.ValueType;

enum abstract Ops(Int) {

	var I32Eqz;
	var I32Eq;
	var I32Ne;
	var I32LtS;
	var I32LtU;
	var I32GtS;
	var I32GtU;
	var I32LeS;
	var I32LeU;
	var I32GeS;
	var I32GeU;
	var I64Eqz;
	var I64Eq;
	var I64Ne;
	var I64LtS;
	var I64LtU;
	var I64GtS;
	var I64GtU;
	var I64LeS;
	var I64LeU;
	var I64GeS;
	var I64GeU;
	var F32Eq;
	var F32Ne;
	var F32Lt;
	var F32Gt;
	var F32Le;
	var F32Ge;
	var F64Eq;
	var F64Ne;
	var F64Lt;
	var F64Gt;
	var F64Le;
	var F64Ge;
	var I32Const;
	var I64Const;
	var F32Const;
	var F64Const;
	var GetLocal;
	var SetLocal;
	var TeeLocal;
	var GetGlobal;
	var SetGlobal;
	var Unreachable;
	var Nop;
	var Block;
	var Loop;
	var If;
	var Else;
	var End;
	var Br;
	var BrIf;
	var BrTable;
	var Return;
	var Call;
	var CallIndirect;
	var I32WrapI64;
	var I32TruncSF32;
	var I32TruncUF32;
	var I32TruncSF64;
	var I32TruncUF64;
	var I64ExtendSI32;
	var I64ExtendUI32;
	var I64TruncSF32;
	var I64TruncUF32;
	var I64TruncSF64;
	var I64TruncUF64;
	var F32ConvertSI32;
	var F32ConvertUI32;
	var F32ConvertSI64;
	var F32ConvertUI64;
	var F32DemoteF64;
	var F64ConvertSI32;
	var F64ConvertUI32;
	var F64ConvertSI64;
	var F64ConvertUI64;
	var F64PromoteF32;
	var I32Load;
	var I64Load;
	var F32Load;
	var F64Load;
	var I32Load8s;
	var I32Load8u;
	var I32Load16s;
	var I32Load16u;
	var I64Load8s;
	var I64Load8u;
	var I64Load16s;
	var I64Load16u;
	var I64Load32s;
	var I64Load32u;
	var I32Store;
	var I64Store;
	var F32Store;
	var F64Store;
	var I32Store8;
	var I32Store16;
	var I64Store8;
	var I64Store16;
	var I64Store32;
	// TODO: rename operations accordingly
	var CurrentMemory;
	var GrowMemory;
	var I32Clz;
	var I32Ctz;
	var I32Popcnt;
	var I32Add;
	var I32Sub;
	var I32Mul;
	var I32DivS;
	var I32DivU;
	var I32RemS;
	var I32RemU;
	var I32And;
	var I32Or;
	var I32Xor;
	var I32Shl;
	var I32ShrS;
	var I32ShrU;
	var I32Rotl;
	var I32Rotr;
	var I64Clz;
	var I64Ctz;
	var I64Popcnt;
	var I64Add;
	var I64Sub;
	var I64Mul;
	var I64DivS;
	var I64DivU;
	var I64RemS;
	var I64RemU;
	var I64And;
	var I64Or;
	var I64Xor;
	var I64Shl;
	var I64ShrS;
	var I64ShrU;
	var I64Rotl;
	var I64Rotr;
	var F32Abs;
	var F32Neg;
	var F32Ceil;
	var F32Floor;
	var F32Trunc;
	var F32Nearest;
	var F32Sqrt;
	var F32Add;
	var F32Sub;
	var F32Mul;
	var F32Div;
	var F32Min;
	var F32Max;
	var F32Copysign;
	var F64Abs;
	var F64Neg;
	var F64Ceil;
	var F64Floor;
	var F64Trunc;
	var F64Nearest;
	var F64Sqrt;
	var F64Add;
	var F64Sub;
	var F64Mul;
	var F64Div;
	var F64Min;
	var F64Max;
	var F64Copysign;
	var Drop;
	var Select;
	var I32ReinterpretF32;
	var I64ReinterpretF64;
	var F32ReinterpretI32;
	var F64ReinterpretI64;

	@:to public inline function toInt():Int {
		return switch this {
			case I32Eqz: Op.init(0x45, "i32.eqz", [ValueTypeI32], ValueTypeI32);
			case I32Eq: Op.init(0x46, "i32.eq", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
			case I32Ne: Op.init(0x47, "i32.ne", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
			case I32LtS: Op.init(0x48, "i32.lt_s", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
			case I32LtU: Op.init(0x49, "i32.lt_u", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
			case I32GtS: Op.init(0x4a, "i32.gt_s", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
			case I32GtU: Op.init(0x4b, "i32.gt_u", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
			case I32LeS: Op.init(0x4c, "i32.le_s", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
			case I32LeU: Op.init(0x4d, "i32.le_u", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
			case I32GeS: Op.init(0x4e, "i32.ge_s", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
			case I32GeU: Op.init(0x4f, "i32.ge_u", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
			case I64Eqz: Op.init(0x50, "i64.eqz", [ValueTypeI64], ValueTypeI32);
			case I64Eq: Op.init(0x51, "i64.eq", [ValueTypeI64, ValueTypeI64], ValueTypeI32);
			case I64Ne: Op.init(0x52, "i64.ne", [ValueTypeI64, ValueTypeI64], ValueTypeI32);
			case I64LtS: Op.init(0x53, "i64.lt_s", [ValueTypeI64, ValueTypeI64], ValueTypeI32);
			case I64LtU: Op.init(0x54, "i64.lt_u", [ValueTypeI64, ValueTypeI64], ValueTypeI32);
			case I64GtS: Op.init(0x55, "i64.gt_s", [ValueTypeI64, ValueTypeI64], ValueTypeI32);
			case I64GtU: Op.init(0x56, "i64.gt_u", [ValueTypeI64, ValueTypeI64], ValueTypeI32);
			case I64LeS: Op.init(0x57, "i64.le_s", [ValueTypeI64, ValueTypeI64], ValueTypeI32);
			case I64LeU: Op.init(0x58, "i64.le_u", [ValueTypeI64, ValueTypeI64], ValueTypeI32);
			case I64GeS: Op.init(0x59, "i64.ge_s", [ValueTypeI64, ValueTypeI64], ValueTypeI32);
			case I64GeU: Op.init(0x5a, "i64.ge_u", [ValueTypeI64, ValueTypeI64], ValueTypeI32);
			case F32Eq: Op.init(0x5b, "f32.eq", [ValueTypeF32, ValueTypeF32], ValueTypeI32);
			case F32Ne: Op.init(0x5c, "f32.ne", [ValueTypeF32, ValueTypeF32], ValueTypeI32);
			case F32Lt: Op.init(0x5d, "f32.lt", [ValueTypeF32, ValueTypeF32], ValueTypeI32);
			case F32Gt: Op.init(0x5e, "f32.gt", [ValueTypeF32, ValueTypeF32], ValueTypeI32);
			case F32Le: Op.init(0x5f, "f32.le", [ValueTypeF32, ValueTypeF32], ValueTypeI32);
			case F32Ge: Op.init(0x60, "f32.ge", [ValueTypeF32, ValueTypeF32], ValueTypeI32);
			case F64Eq: Op.init(0x61, "f64.eq", [ValueTypeF64, ValueTypeF64], ValueTypeI32);
			case F64Ne: Op.init(0x62, "f64.ne", [ValueTypeF64, ValueTypeF64], ValueTypeI32);
			case F64Lt: Op.init(0x63, "f64.lt", [ValueTypeF64, ValueTypeF64], ValueTypeI32);
			case F64Gt: Op.init(0x64, "f64.gt", [ValueTypeF64, ValueTypeF64], ValueTypeI32);
			case F64Le: Op.init(0x65, "f64.le", [ValueTypeF64, ValueTypeF64], ValueTypeI32);
			case F64Ge: Op.init(0x66, "f64.ge", [ValueTypeF64, ValueTypeF64], ValueTypeI32);

			case I32Const: Op.init(0x41, "i32.const", null, ValueTypeI32);
			case I64Const: Op.init(0x42, "i64.const", null, ValueTypeI64);
			case F32Const: Op.init(0x43, "f32.const", null, ValueTypeF32);
			case F64Const: Op.init(0x44, "f64.const", null, ValueTypeF64);

			case GetLocal: Op.initPolymorphic(0x20, "get_local");
			case SetLocal: Op.initPolymorphic(0x21, "set_local");
			case TeeLocal: Op.initPolymorphic(0x22, "tee_local");
			case GetGlobal: Op.initPolymorphic(0x23, "get_global");
			case SetGlobal: Op.initPolymorphic(0x24, "set_global");

			case Unreachable: Op.init(0x00, "unreachable", null, cast(BlockTypeEmpty, ValueType));
			case Nop: Op.init(0x01, "nop", null, cast(BlockTypeEmpty, ValueType));
			case Block: Op.init(0x02, "block", null, cast(BlockTypeEmpty, ValueType));
			case Loop: Op.init(0x03, "loop", null, cast(BlockTypeEmpty, ValueType));
			case If: Op.init(0x04, "if", [ValueTypeI32], cast(BlockTypeEmpty, ValueType));
			case Else: Op.init(0x05, "else", null, cast(BlockTypeEmpty, ValueType));
			case End: Op.init(0x0b, "end", null, cast(BlockTypeEmpty, ValueType));
			case Br: Op.initPolymorphic(0x0c, "br");
			case BrIf: Op.init(0x0d, "br_if", [ValueTypeI32], cast(BlockTypeEmpty, ValueType));
			case BrTable: Op.initPolymorphic(0x0e, "br_table");
			case Return: Op.initPolymorphic(0x0f, "return");

			case Call: Op.initPolymorphic(0x10, "call");
			case CallIndirect: Op.initPolymorphic(0x11, "call_indirect");

			case I32WrapI64: Op.initConversion(0xa7, "i32.wrap/i64");
			case I32TruncSF32: Op.initConversion(0xa8, "i32.trunc_s/f32");
			case I32TruncUF32: Op.initConversion(0xa9, "i32.trunc_u/f32");
			case I32TruncSF64: Op.initConversion(0xaa, "i32.trunc_s/f64");
			case I32TruncUF64: Op.initConversion(0xab, "i32.trunc_u/f64");
			case I64ExtendSI32: Op.initConversion(0xac, "i64.extend_s/i32");
			case I64ExtendUI32: Op.initConversion(0xad, "i64.extend_u/i32");
			case I64TruncSF32: Op.initConversion(0xae, "i64.trunc_s/f32");
			case I64TruncUF32: Op.initConversion(0xaf, "i64.trunc_u/f32");
			case I64TruncSF64: Op.initConversion(0xb0, "i64.trunc_s/f64");
			case I64TruncUF64: Op.initConversion(0xb1, "i64.trunc_u/f64");
			case F32ConvertSI32: Op.initConversion(0xb2, "f32.convert_s/i32");
			case F32ConvertUI32: Op.initConversion(0xb3, "f32.convert_u/i32");
			case F32ConvertSI64: Op.initConversion(0xb4, "f32.convert_s/i64");
			case F32ConvertUI64: Op.initConversion(0xb5, "f32.convert_u/i64");
			case F32DemoteF64: Op.initConversion(0xb6, "f32.demote/f64");
			case F64ConvertSI32: Op.initConversion(0xb7, "f64.convert_s/i32");
			case F64ConvertUI32: Op.initConversion(0xb8, "f64.convert_u/i32");
			case F64ConvertSI64: Op.initConversion(0xb9, "f64.convert_s/i64");
			case F64ConvertUI64: Op.initConversion(0xba, "f64.convert_u/i64");
			case F64PromoteF32: Op.initConversion(0xbb, "f64.promote/f32");
			case I32Load: Op.init(0x28, "i32.load", [ValueTypeI32], ValueTypeI32);
			case I64Load: Op.init(0x29, "i64.load", [ValueTypeI32], ValueTypeI64);
			case F32Load: Op.init(0x2a, "f32.load", [ValueTypeI32], ValueTypeF32);
			case F64Load: Op.init(0x2b, "f64.load", [ValueTypeI32], ValueTypeF64);
			case I32Load8s: Op.init(0x2c, "i32.load8_s", [ValueTypeI32], ValueTypeI32);
			case I32Load8u: Op.init(0x2d, "i32.load8_u", [ValueTypeI32], ValueTypeI32);
			case I32Load16s: Op.init(0x2e, "i32.load16_s", [ValueTypeI32], ValueTypeI32);
			case I32Load16u: Op.init(0x2f, "i32.load16_u", [ValueTypeI32], ValueTypeI32);
			case I64Load8s: Op.init(0x30, "i64.load8_s", [ValueTypeI32], ValueTypeI64);
			case I64Load8u: Op.init(0x31, "i64.load8_u", [ValueTypeI32], ValueTypeI64);
			case I64Load16s: Op.init(0x32, "i64.load16_s", [ValueTypeI32], ValueTypeI64);
			case I64Load16u: Op.init(0x33, "i64.load16_u", [ValueTypeI32], ValueTypeI64);
			case I64Load32s: Op.init(0x34, "i64.load32_s", [ValueTypeI32], ValueTypeI64);
			case I64Load32u: Op.init(0x35, "i64.load32_u", [ValueTypeI32], ValueTypeI64);
			case I32Store: Op.init(0x36, "i32.store", [ValueTypeI32, ValueTypeI32], cast(BlockTypeEmpty, ValueType));
			case I64Store: Op.init(0x37, "i64.store", [ValueTypeI64, ValueTypeI32], cast(BlockTypeEmpty, ValueType));
			case F32Store: Op.init(0x38, "f32.store", [ValueTypeF32, ValueTypeI32], cast(BlockTypeEmpty, ValueType));
			case F64Store: Op.init(0x39, "f64.store", [ValueTypeF64, ValueTypeI32], cast(BlockTypeEmpty, ValueType));
			case I32Store8: Op.init(0x3a, "i32.store8", [ValueTypeI32, ValueTypeI32], cast(BlockTypeEmpty, ValueType));
			case I32Store16: Op.init(0x3b, "i32.store16", [ValueTypeI32, ValueTypeI32], cast(BlockTypeEmpty, ValueType));
			case I64Store8: Op.init(0x3c, "i64.store8", [ValueTypeI64, ValueTypeI32], cast(BlockTypeEmpty, ValueType));
			case I64Store16: Op.init(0x3d, "i64.store16", [ValueTypeI64, ValueTypeI32], cast(BlockTypeEmpty, ValueType));
			case I64Store32: Op.init(0x3e, "i64.store32", [ValueTypeI64, ValueTypeI32], cast(BlockTypeEmpty, ValueType));
			// TODO: rename operations accordingly
			case CurrentMemory: Op.init(0x3f, "memory.size", null, ValueTypeI32);
			case GrowMemory: Op.init(0x40, "memory.grow", [ValueTypeI32], ValueTypeI32);

			case I32Clz: Op.init(0x67, "i32.clz", [ValueTypeI32], ValueTypeI32);
			case I32Ctz: Op.init(0x68, "i32.ctz", [ValueTypeI32], ValueTypeI32);
			case I32Popcnt: Op.init(0x69, "i32.popcnt", [ValueTypeI32], ValueTypeI32);
			case I32Add: Op.init(0x6a, "i32.add", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
			case I32Sub: Op.init(0x6b, "i32.sub", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
			case I32Mul: Op.init(0x6c, "i32.mul", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
			case I32DivS: Op.init(0x6d, "i32.div_s", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
			case I32DivU: Op.init(0x6e, "i32.div_u", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
			case I32RemS: Op.init(0x6f, "i32.rem_s", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
			case I32RemU: Op.init(0x70, "i32.rem_u", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
			case I32And: Op.init(0x71, "i32.and", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
			case I32Or: Op.init(0x72, "i32.or", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
			case I32Xor: Op.init(0x73, "i32.xor", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
			case I32Shl: Op.init(0x74, "i32.shl", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
			case I32ShrS: Op.init(0x75, "i32.shr_s", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
			case I32ShrU: Op.init(0x76, "i32.shr_u", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
			case I32Rotl: Op.init(0x77, "i32.rotl", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
			case I32Rotr: Op.init(0x78, "i32.rotr", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
			case I64Clz: Op.init(0x79, "i64.clz", [ValueTypeI64], ValueTypeI64);
			case I64Ctz: Op.init(0x7a, "i64.ctz", [ValueTypeI64], ValueTypeI64);
			case I64Popcnt: Op.init(0x7b, "i64.popcnt", [ValueTypeI64], ValueTypeI64);
			case I64Add: Op.init(0x7c, "i64.add", [ValueTypeI64, ValueTypeI64], ValueTypeI64);
			case I64Sub: Op.init(0x7d, "i64.sub", [ValueTypeI64, ValueTypeI64], ValueTypeI64);
			case I64Mul: Op.init(0x7e, "i64.mul", [ValueTypeI64, ValueTypeI64], ValueTypeI64);
			case I64DivS: Op.init(0x7f, "i64.div_s", [ValueTypeI64, ValueTypeI64], ValueTypeI64);
			case I64DivU: Op.init(0x80, "i64.div_u", [ValueTypeI64, ValueTypeI64], ValueTypeI64);
			case I64RemS: Op.init(0x81, "i64.rem_s", [ValueTypeI64, ValueTypeI64], ValueTypeI64);
			case I64RemU: Op.init(0x82, "i64.rem_u", [ValueTypeI64, ValueTypeI64], ValueTypeI64);
			case I64And: Op.init(0x83, "i64.and", [ValueTypeI64, ValueTypeI64], ValueTypeI64);
			case I64Or: Op.init(0x84, "i64.or", [ValueTypeI64, ValueTypeI64], ValueTypeI64);
			case I64Xor: Op.init(0x85, "i64.xor", [ValueTypeI64, ValueTypeI64], ValueTypeI64);
			case I64Shl: Op.init(0x86, "i64.shl", [ValueTypeI64, ValueTypeI64], ValueTypeI64);
			case I64ShrS: Op.init(0x87, "i64.shr_s", [ValueTypeI64, ValueTypeI64], ValueTypeI64);
			case I64ShrU: Op.init(0x88, "i64.shr_u", [ValueTypeI64, ValueTypeI64], ValueTypeI64);
			case I64Rotl: Op.init(0x89, "i64.rotl", [ValueTypeI64, ValueTypeI64], ValueTypeI64);
			case I64Rotr: Op.init(0x8a, "i64.rotr", [ValueTypeI64, ValueTypeI64], ValueTypeI64);
			case F32Abs: Op.init(0x8b, "f32.abs", [ValueTypeF32], ValueTypeF32);
			case F32Neg: Op.init(0x8c, "f32.neg", [ValueTypeF32], ValueTypeF32);
			case F32Ceil: Op.init(0x8d, "f32.ceil", [ValueTypeF32], ValueTypeF32);
			case F32Floor: Op.init(0x8e, "f32.floor", [ValueTypeF32], ValueTypeF32);
			case F32Trunc: Op.init(0x8f, "f32.trunc", [ValueTypeF32], ValueTypeF32);
			case F32Nearest: Op.init(0x90, "f32.nearest", [ValueTypeF32], ValueTypeF32);
			case F32Sqrt: Op.init(0x91, "f32.sqrt", [ValueTypeF32], ValueTypeF32);
			case F32Add: Op.init(0x92, "f32.add", [ValueTypeF32, ValueTypeF32], ValueTypeF32);
			case F32Sub: Op.init(0x93, "f32.sub", [ValueTypeF32, ValueTypeF32], ValueTypeF32);
			case F32Mul: Op.init(0x94, "f32.mul", [ValueTypeF32, ValueTypeF32], ValueTypeF32);
			case F32Div: Op.init(0x95, "f32.div", [ValueTypeF32, ValueTypeF32], ValueTypeF32);
			case F32Min: Op.init(0x96, "f32.min", [ValueTypeF32, ValueTypeF32], ValueTypeF32);
			case F32Max: Op.init(0x97, "f32.max", [ValueTypeF32, ValueTypeF32], ValueTypeF32);
			case F32Copysign: Op.init(0x98, "f32.copysign", [ValueTypeF32, ValueTypeF32], ValueTypeF32);
			case F64Abs: Op.init(0x99, "f64.abs", [ValueTypeF64], ValueTypeF64);
			case F64Neg: Op.init(0x9a, "f64.neg", [ValueTypeF64], ValueTypeF64);
			case F64Ceil: Op.init(0x9b, "f64.ceil", [ValueTypeF64], ValueTypeF64);
			case F64Floor: Op.init(0x9c, "f64.floor", [ValueTypeF64], ValueTypeF64);
			case F64Trunc: Op.init(0x9d, "f64.trunc", [ValueTypeF64], ValueTypeF64);
			case F64Nearest: Op.init(0x9e, "f64.nearest", [ValueTypeF64], ValueTypeF64);
			case F64Sqrt: Op.init(0x9f, "f64.sqrt", [ValueTypeF64], ValueTypeF64);
			case F64Add: Op.init(0xa0, "f64.add", [ValueTypeF64, ValueTypeF64], ValueTypeF64);
			case F64Sub: Op.init(0xa1, "f64.sub", [ValueTypeF64, ValueTypeF64], ValueTypeF64);
			case F64Mul: Op.init(0xa2, "f64.mul", [ValueTypeF64, ValueTypeF64], ValueTypeF64);
			case F64Div: Op.init(0xa3, "f64.div", [ValueTypeF64, ValueTypeF64], ValueTypeF64);
			case F64Min: Op.init(0xa4, "f64.min", [ValueTypeF64, ValueTypeF64], ValueTypeF64);
			case F64Max: Op.init(0xa5, "f64.max", [ValueTypeF64, ValueTypeF64], ValueTypeF64);
			case F64Copysign: Op.init(0xa6, "f64.copysign", [ValueTypeF64, ValueTypeF64], ValueTypeF64);
			case Drop: Op.initPolymorphic(0x1a, "drop");
			case Select: Op.initPolymorphic(0x1b, "select");

			case I32ReinterpretF32: Op.init(0xbc, "i32.reinterpret/f32", [ValueTypeF32], ValueTypeI32);
			case I64ReinterpretF64: Op.init(0xbd, "i64.reinterpret/f64", [ValueTypeF64], ValueTypeI64);
			case F32ReinterpretI32: Op.init(0xbe, "f32.reinterpret/i32", [ValueTypeI32], ValueTypeF32);
			case F64ReinterpretI64: Op.init(0xbf, "f64.reinterpret/i64", [ValueTypeI64], ValueTypeF64);
			default: throw 'invalid op $this';
		}
	}
}
