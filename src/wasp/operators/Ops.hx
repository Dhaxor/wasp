package wasp.operators;

import wasp.types.BlockType;
import wasp.types.ValueType;

class Ops {
	public static var I32Eqz = Op.init(0x45, "i32.eqz", [ValueTypeI32], ValueTypeI32);
	public static var I32Eq = Op.init(0x46, "i32.eq", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
	public static var I32Ne = Op.init(0x47, "i32.ne", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
	public static var I32LtS = Op.init(0x48, "i32.lt_s", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
	public static var I32LtU = Op.init(0x49, "i32.lt_u", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
	public static var I32GtS = Op.init(0x4a, "i32.gt_s", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
	public static var I32GtU = Op.init(0x4b, "i32.gt_u", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
	public static var I32LeS = Op.init(0x4c, "i32.le_s", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
	public static var I32LeU = Op.init(0x4d, "i32.le_u", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
	public static var I32GeS = Op.init(0x4e, "i32.ge_s", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
	public static var I32GeU = Op.init(0x4f, "i32.ge_u", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
	public static var I64Eqz = Op.init(0x50, "i64.eqz", [ValueTypeI64], ValueTypeI32);
	public static var I64Eq = Op.init(0x51, "i64.eq", [ValueTypeI64, ValueTypeI64], ValueTypeI32);
	public static var I64Ne = Op.init(0x52, "i64.ne", [ValueTypeI64, ValueTypeI64], ValueTypeI32);
	public static var I64LtS = Op.init(0x53, "i64.lt_s", [ValueTypeI64, ValueTypeI64], ValueTypeI32);
	public static var I64LtU = Op.init(0x54, "i64.lt_u", [ValueTypeI64, ValueTypeI64], ValueTypeI32);
	public static var I64GtS = Op.init(0x55, "i64.gt_s", [ValueTypeI64, ValueTypeI64], ValueTypeI32);
	public static var I64GtU = Op.init(0x56, "i64.gt_u", [ValueTypeI64, ValueTypeI64], ValueTypeI32);
	public static var I64LeS = Op.init(0x57, "i64.le_s", [ValueTypeI64, ValueTypeI64], ValueTypeI32);
	public static var I64LeU = Op.init(0x58, "i64.le_u", [ValueTypeI64, ValueTypeI64], ValueTypeI32);
	public static var I64GeS = Op.init(0x59, "i64.ge_s", [ValueTypeI64, ValueTypeI64], ValueTypeI32);
	public static var I64GeU = Op.init(0x5a, "i64.ge_u", [ValueTypeI64, ValueTypeI64], ValueTypeI32);
	public static var F32Eq = Op.init(0x5b, "f32.eq", [ValueTypeF32, ValueTypeF32], ValueTypeI32);
	public static var F32Ne = Op.init(0x5c, "f32.ne", [ValueTypeF32, ValueTypeF32], ValueTypeI32);
	public static var F32Lt = Op.init(0x5d, "f32.lt", [ValueTypeF32, ValueTypeF32], ValueTypeI32);
	public static var F32Gt = Op.init(0x5e, "f32.gt", [ValueTypeF32, ValueTypeF32], ValueTypeI32);
	public static var F32Le = Op.init(0x5f, "f32.le", [ValueTypeF32, ValueTypeF32], ValueTypeI32);
	public static var F32Ge = Op.init(0x60, "f32.ge", [ValueTypeF32, ValueTypeF32], ValueTypeI32);
	public static var F64Eq = Op.init(0x61, "f64.eq", [ValueTypeF64, ValueTypeF64], ValueTypeI32);
	public static var F64Ne = Op.init(0x62, "f64.ne", [ValueTypeF64, ValueTypeF64], ValueTypeI32);
	public static var F64Lt = Op.init(0x63, "f64.lt", [ValueTypeF64, ValueTypeF64], ValueTypeI32);
	public static var F64Gt = Op.init(0x64, "f64.gt", [ValueTypeF64, ValueTypeF64], ValueTypeI32);
	public static var F64Le = Op.init(0x65, "f64.le", [ValueTypeF64, ValueTypeF64], ValueTypeI32);
	public static var F64Ge = Op.init(0x66, "f64.ge", [ValueTypeF64, ValueTypeF64], ValueTypeI32);

	public static var I32Const = Op.init(0x41, "i32.const", null, ValueTypeI32);
	public static var I64Const = Op.init(0x42, "i64.const", null, ValueTypeI64);
	public static var F32Const = Op.init(0x43, "f32.const", null, ValueTypeF32);
	public static var F64Const = Op.init(0x44, "f64.const", null, ValueTypeF64);

	public static var GetLocal = Op.initPolymorphic(0x20, "get_local");
	public static var SetLocal = Op.initPolymorphic(0x21, "set_local");
	public static var TeeLocal = Op.initPolymorphic(0x22, "tee_local");
	public static var GetGlobal = Op.initPolymorphic(0x23, "get_global");
	public static var SetGlobal = Op.initPolymorphic(0x24, "set_global");

	public static var Unreachable = Op.init(0x00, "unreachable", null, cast(BlockTypeEmpty, ValueType));
	public static var Nop = Op.init(0x01, "nop", null, cast(BlockTypeEmpty, ValueType));
	public static var Block = Op.init(0x02, "block", null, cast(BlockTypeEmpty, ValueType));
	public static var Loop = Op.init(0x03, "loop", null, cast(BlockTypeEmpty, ValueType));
	public static var If = Op.init(0x04, "if", [ValueTypeI32], cast(BlockTypeEmpty, ValueType));
	public static var Else = Op.init(0x05, "else", null, cast(BlockTypeEmpty, ValueType));
	public static var End = Op.init(0x0b, "end", null, cast(BlockTypeEmpty, ValueType));
	public static var Br = Op.initPolymorphic(0x0c, "br");
	public static var BrIf = Op.init(0x0d, "br_if", [ValueTypeI32], cast(BlockTypeEmpty, ValueType));
	public static var BrTable = Op.initPolymorphic(0x0e, "br_table");
	public static var Return = Op.initPolymorphic(0x0f, "return");

	public static var Call = Op.initPolymorphic(0x10, "call");
	public static var CallIndirect = Op.initPolymorphic(0x11, "call_indirect");

	public static var I32WrapI64 = Op.initConversion(0xa7, "i32.wrap/i64");
	public static var I32TruncSF32 = Op.initConversion(0xa8, "i32.trunc_s/f32");
	public static var I32TruncUF32 = Op.initConversion(0xa9, "i32.trunc_u/f32");
	public static var I32TruncSF64 = Op.initConversion(0xaa, "i32.trunc_s/f64");
	public static var I32TruncUF64 = Op.initConversion(0xab, "i32.trunc_u/f64");
	public static var I64ExtendSI32 = Op.initConversion(0xac, "i64.extend_s/i32");
	public static var I64ExtendUI32 = Op.initConversion(0xad, "i64.extend_u/i32");
	public static var I64TruncSF32 = Op.initConversion(0xae, "i64.trunc_s/f32");
	public static var I64TruncUF32 = Op.initConversion(0xaf, "i64.trunc_u/f32");
	public static var I64TruncSF64 = Op.initConversion(0xb0, "i64.trunc_s/f64");
	public static var I64TruncUF64 = Op.initConversion(0xb1, "i64.trunc_u/f64");
	public static var F32ConvertSI32 = Op.initConversion(0xb2, "f32.convert_s/i32");
	public static var F32ConvertUI32 = Op.initConversion(0xb3, "f32.convert_u/i32");
	public static var F32ConvertSI64 = Op.initConversion(0xb4, "f32.convert_s/i64");
	public static var F32ConvertUI64 = Op.initConversion(0xb5, "f32.convert_u/i64");
	public static var F32DemoteF64 = Op.initConversion(0xb6, "f32.demote/f64");
	public static var F64ConvertSI32 = Op.initConversion(0xb7, "f64.convert_s/i32");
	public static var F64ConvertUI32 = Op.initConversion(0xb8, "f64.convert_u/i32");
	public static var F64ConvertSI64 = Op.initConversion(0xb9, "f64.convert_s/i64");
	public static var F64ConvertUI64 = Op.initConversion(0xba, "f64.convert_u/i64");
	public static var F64PromoteF32 = Op.initConversion(0xbb, "f64.promote/f32");
	public static var I32Load = Op.init(0x28, "i32.load", [ValueTypeI32], ValueTypeI32);
	public static var I64Load = Op.init(0x29, "i64.load", [ValueTypeI32], ValueTypeI64);
	public static var F32Load = Op.init(0x2a, "f32.load", [ValueTypeI32], ValueTypeF32);
	public static var F64Load = Op.init(0x2b, "f64.load", [ValueTypeI32], ValueTypeF64);
	public static var I32Load8s = Op.init(0x2c, "i32.load8_s", [ValueTypeI32], ValueTypeI32);
	public static var I32Load8u = Op.init(0x2d, "i32.load8_u", [ValueTypeI32], ValueTypeI32);
	public static var I32Load16s = Op.init(0x2e, "i32.load16_s", [ValueTypeI32], ValueTypeI32);
	public static var I32Load16u = Op.init(0x2f, "i32.load16_u", [ValueTypeI32], ValueTypeI32);
	public static var I64Load8s = Op.init(0x30, "i64.load8_s", [ValueTypeI32], ValueTypeI64);
	public static var I64Load8u = Op.init(0x31, "i64.load8_u", [ValueTypeI32], ValueTypeI64);
	public static var I64Load16s = Op.init(0x32, "i64.load16_s", [ValueTypeI32], ValueTypeI64);
	public static var I64Load16u = Op.init(0x33, "i64.load16_u", [ValueTypeI32], ValueTypeI64);
	public static var I64Load32s = Op.init(0x34, "i64.load32_s", [ValueTypeI32], ValueTypeI64);
	public static var I64Load32u = Op.init(0x35, "i64.load32_u", [ValueTypeI32], ValueTypeI64);
	public static var I32Store = Op.init(0x36, "i32.store", [ValueTypeI32, ValueTypeI32], cast(BlockTypeEmpty, ValueType));
	public static var I64Store = Op.init(0x37, "i64.store", [ValueTypeI64, ValueTypeI32], cast(BlockTypeEmpty, ValueType));
	public static var F32Store = Op.init(0x38, "f32.store", [ValueTypeF32, ValueTypeI32], cast(BlockTypeEmpty, ValueType));
	public static var F64Store = Op.init(0x39, "f64.store", [ValueTypeF64, ValueTypeI32], cast(BlockTypeEmpty, ValueType));
	public static var I32Store8 = Op.init(0x3a, "i32.store8", [ValueTypeI32, ValueTypeI32], cast(BlockTypeEmpty, ValueType));
	public static var I32Store16 = Op.init(0x3b, "i32.store16", [ValueTypeI32, ValueTypeI32], cast(BlockTypeEmpty, ValueType));
	public static var I64Store8 = Op.init(0x3c, "i64.store8", [ValueTypeI64, ValueTypeI32], cast(BlockTypeEmpty, ValueType));
	public static var I64Store16 = Op.init(0x3d, "i64.store16", [ValueTypeI64, ValueTypeI32], cast(BlockTypeEmpty, ValueType));
	public static var I64Store32 = Op.init(0x3e, "i64.store32", [ValueTypeI64, ValueTypeI32], cast(BlockTypeEmpty, ValueType));
	// TODO: rename operations accordingly
	public static var CurrentMemory = Op.init(0x3f, "memory.size", null, ValueTypeI32);
	public static var GrowMemory = Op.init(0x40, "memory.grow", [ValueTypeI32], ValueTypeI32);

	public static var I32Clz = Op.init(0x67, "i32.clz", [ValueTypeI32], ValueTypeI32);
	public static var I32Ctz = Op.init(0x68, "i32.ctz", [ValueTypeI32], ValueTypeI32);
	public static var I32Popcnt = Op.init(0x69, "i32.popcnt", [ValueTypeI32], ValueTypeI32);
	public static var I32Add = Op.init(0x6a, "i32.add", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
	public static var I32Sub = Op.init(0x6b, "i32.sub", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
	public static var I32Mul = Op.init(0x6c, "i32.mul", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
	public static var I32DivS = Op.init(0x6d, "i32.div_s", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
	public static var I32DivU = Op.init(0x6e, "i32.div_u", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
	public static var I32RemS = Op.init(0x6f, "i32.rem_s", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
	public static var I32RemU = Op.init(0x70, "i32.rem_u", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
	public static var I32And = Op.init(0x71, "i32.and", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
	public static var I32Or = Op.init(0x72, "i32.or", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
	public static var I32Xor = Op.init(0x73, "i32.xor", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
	public static var I32Shl = Op.init(0x74, "i32.shl", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
	public static var I32ShrS = Op.init(0x75, "i32.shr_s", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
	public static var I32ShrU = Op.init(0x76, "i32.shr_u", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
	public static var I32Rotl = Op.init(0x77, "i32.rotl", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
	public static var I32Rotr = Op.init(0x78, "i32.rotr", [ValueTypeI32, ValueTypeI32], ValueTypeI32);
	public static var I64Clz = Op.init(0x79, "i64.clz", [ValueTypeI64], ValueTypeI64);
	public static var I64Ctz = Op.init(0x7a, "i64.ctz", [ValueTypeI64], ValueTypeI64);
	public static var I64Popcnt = Op.init(0x7b, "i64.popcnt", [ValueTypeI64], ValueTypeI64);
	public static var I64Add = Op.init(0x7c, "i64.add", [ValueTypeI64, ValueTypeI64], ValueTypeI64);
	public static var I64Sub = Op.init(0x7d, "i64.sub", [ValueTypeI64, ValueTypeI64], ValueTypeI64);
	public static var I64Mul = Op.init(0x7e, "i64.mul", [ValueTypeI64, ValueTypeI64], ValueTypeI64);
	public static var I64DivS = Op.init(0x7f, "i64.div_s", [ValueTypeI64, ValueTypeI64], ValueTypeI64);
	public static var I64DivU = Op.init(0x80, "i64.div_u", [ValueTypeI64, ValueTypeI64], ValueTypeI64);
	public static var I64RemS = Op.init(0x81, "i64.rem_s", [ValueTypeI64, ValueTypeI64], ValueTypeI64);
	public static var I64RemU = Op.init(0x82, "i64.rem_u", [ValueTypeI64, ValueTypeI64], ValueTypeI64);
	public static var I64And = Op.init(0x83, "i64.and", [ValueTypeI64, ValueTypeI64], ValueTypeI64);
	public static var I64Or = Op.init(0x84, "i64.or", [ValueTypeI64, ValueTypeI64], ValueTypeI64);
	public static var I64Xor = Op.init(0x85, "i64.xor", [ValueTypeI64, ValueTypeI64], ValueTypeI64);
	public static var I64Shl = Op.init(0x86, "i64.shl", [ValueTypeI64, ValueTypeI64], ValueTypeI64);
	public static var I64ShrS = Op.init(0x87, "i64.shr_s", [ValueTypeI64, ValueTypeI64], ValueTypeI64);
	public static var I64ShrU = Op.init(0x88, "i64.shr_u", [ValueTypeI64, ValueTypeI64], ValueTypeI64);
	public static var I64Rotl = Op.init(0x89, "i64.rotl", [ValueTypeI64, ValueTypeI64], ValueTypeI64);
	public static var I64Rotr = Op.init(0x8a, "i64.rotr", [ValueTypeI64, ValueTypeI64], ValueTypeI64);
	public static var F32Abs = Op.init(0x8b, "f32.abs", [ValueTypeF32], ValueTypeF32);
	public static var F32Neg = Op.init(0x8c, "f32.neg", [ValueTypeF32], ValueTypeF32);
	public static var F32Ceil = Op.init(0x8d, "f32.ceil", [ValueTypeF32], ValueTypeF32);
	public static var F32Floor = Op.init(0x8e, "f32.floor", [ValueTypeF32], ValueTypeF32);
	public static var F32Trunc = Op.init(0x8f, "f32.trunc", [ValueTypeF32], ValueTypeF32);
	public static var F32Nearest = Op.init(0x90, "f32.nearest", [ValueTypeF32], ValueTypeF32);
	public static var F32Sqrt = Op.init(0x91, "f32.sqrt", [ValueTypeF32], ValueTypeF32);
	public static var F32Add = Op.init(0x92, "f32.add", [ValueTypeF32, ValueTypeF32], ValueTypeF32);
	public static var F32Sub = Op.init(0x93, "f32.sub", [ValueTypeF32, ValueTypeF32], ValueTypeF32);
	public static var F32Mul = Op.init(0x94, "f32.mul", [ValueTypeF32, ValueTypeF32], ValueTypeF32);
	public static var F32Div = Op.init(0x95, "f32.div", [ValueTypeF32, ValueTypeF32], ValueTypeF32);
	public static var F32Min = Op.init(0x96, "f32.min", [ValueTypeF32, ValueTypeF32], ValueTypeF32);
	public static var F32Max = Op.init(0x97, "f32.max", [ValueTypeF32, ValueTypeF32], ValueTypeF32);
	public static var F32Copysign = Op.init(0x98, "f32.copysign", [ValueTypeF32, ValueTypeF32], ValueTypeF32);
	public static var F64Abs = Op.init(0x99, "f64.abs", [ValueTypeF64], ValueTypeF64);
	public static var F64Neg = Op.init(0x9a, "f64.neg", [ValueTypeF64], ValueTypeF64);
	public static var F64Ceil = Op.init(0x9b, "f64.ceil", [ValueTypeF64], ValueTypeF64);
	public static var F64Floor = Op.init(0x9c, "f64.floor", [ValueTypeF64], ValueTypeF64);
	public static var F64Trunc = Op.init(0x9d, "f64.trunc", [ValueTypeF64], ValueTypeF64);
	public static var F64Nearest = Op.init(0x9e, "f64.nearest", [ValueTypeF64], ValueTypeF64);
	public static var F64Sqrt = Op.init(0x9f, "f64.sqrt", [ValueTypeF64], ValueTypeF64);
	public static var F64Add = Op.init(0xa0, "f64.add", [ValueTypeF64, ValueTypeF64], ValueTypeF64);
	public static var F64Sub = Op.init(0xa1, "f64.sub", [ValueTypeF64, ValueTypeF64], ValueTypeF64);
	public static var F64Mul = Op.init(0xa2, "f64.mul", [ValueTypeF64, ValueTypeF64], ValueTypeF64);
	public static var F64Div = Op.init(0xa3, "f64.div", [ValueTypeF64, ValueTypeF64], ValueTypeF64);
	public static var F64Min = Op.init(0xa4, "f64.min", [ValueTypeF64, ValueTypeF64], ValueTypeF64);
	public static var F64Max = Op.init(0xa5, "f64.max", [ValueTypeF64, ValueTypeF64], ValueTypeF64);
	public static var F64Copysign = Op.init(0xa6, "f64.copysign", [ValueTypeF64, ValueTypeF64], ValueTypeF64);
	public static var Drop = Op.initPolymorphic(0x1a, "drop");
	public static var Select = Op.initPolymorphic(0x1b, "select");

	public static var I32ReinterpretF32 = Op.init(0xbc, "i32.reinterpret/f32", [ValueTypeF32], ValueTypeI32);
	public static var I64ReinterpretF64 = Op.init(0xbd, "i64.reinterpret/f64", [ValueTypeF64], ValueTypeI64);
	public static var F32ReinterpretI32 = Op.init(0xbe, "f32.reinterpret/i32", [ValueTypeI32], ValueTypeF32);
	public static var F64ReinterpretI64 = Op.init(0xbf, "f64.reinterpret/i64", [ValueTypeI64], ValueTypeF64);
}
